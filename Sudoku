globnum = 1

brd = []


def ispossible(num,row,col,board):
 # print("num is ", num, " row is ", row, " col is ", col)
  for i in range(0,9):
    
    if board[row][i] == num:
      
      return False
      
  for p in range (0,9): # change back to 9
      
    if board[p][col] == num:
        
      return False
    
  if col == 0 or col == 1 or col == 2: #first box
      
    if row == 0 or row == 1 or row ==2:
        
      for t in range(0,3):
          
        for g in range(0,3):
            
          if board[t][g] == num:
              
            return False
      
    elif row == 3 or row == 4 or row == 5:
        
      for t in range(3,6):
          
        for g in range(0,3):
            
          if board[t][g] == num:
              
            return False
      
    elif row == 6 or row == 7 or row == 8:
        
      for t in range(6,9):
          
        for g in range(0,3):
            
          if board[t][g] == num:
              
            return False
    
  elif col == 3 or col == 4 or col == 5:  #second box
      
    if row == 0 or row == 1 or row ==2:
        
      for t in range(0,3):
          
        for g in range(3,6):
            
          if board[t][g] == num:
              
            return False
      
    elif row == 3 or row == 4 or row == 5:
        
      for t in range(3,6):
          
        for g in range(3,6):
            
          if board[t][g] == num:
              
            return False
      
    elif row == 6 or row == 7 or row == 8:
        
      for t in range(6,9):
          
        for g in range(3,6):
            
          if board[t][g] == num:
              
            return False
              
  elif col == 6 or col == 7 or col == 8:  #third box
      
    if row == 0 or row == 1 or row ==2:
        
      for t in range(0,3):
          
        for g in range(6,9):
            
          if board[t][g] == num:
              
            return False
      
    elif row == 3 or row == 4 or row == 5:
        
      for t in range(3,6):
          
        for g in range(6,9):
            
          if board[t][g] == num:
              
            return False
      
    elif row == 6 or row == 7 or row == 8:
        
      for t in range(6,9):
          
        for g in range(6,9):
            
          if board[t][g] == num:
              
            return False    
  
  #print("returning ", num , " for ",row,col)
  return True

'''def donum(row,col,board):
  
  for num in range(1,10):
    print("trying",row,col,num)
    if ispossible(num,row,col,board):
            
      board[row][col] = num
      print(row,col,"is",num)
            
      if col < 9:
  
        donum(row,col+1,board)'''
  

def docol(row,col,board,lvl):
  
    global globnum
    global brd
  
    if row == 9:
      
      if globnum == 1:
        
        print(board)
        brd = board
        print("brd is",brd)
        globnum+=1
    
    else:
      
      if board[row][col] == ' ':
          
        for num in range (1,10):
          #print("trying...",row,col,num,"lvl is",lvl)
          if ispossible(num,row,col,board):
          
            board[row][col] = num
          #print(board)
            if col < 8:
              
              docol(row,col+1,board,lvl+1)
          
            if not ' ' in board[row]:
            
              docol(row+1,0,board,lvl+1)
            
     
        board[row][col] = ' '
        
    
      else:
      
        if col < 8:
          docol(row,col+1,board,lvl)
        
        else:
        
          docol(row+1,0,board,lvl)
  
def sudokusolver(board,roww,column,lvl):
  

  if not any (' ' in subl for subl in board):
   
    #print("printing board",board)
    return True
      
  docol(roww,0,board,0)
      

  #return board
  
board = [[5,3,' ',' ',7,' ',' ',' ',' '],
          [6,' ',' ',1,9,5,' ',' ',' '],
          [' ',9,8,' ',' ',' ',' ',6,' '],
          [8,' ',' ',' ',6,' ',' ',' ',3],
          [4,' ',' ',8,' ',3,' ',' ',1],
          [7,' ',' ',' ',2,' ',' ',' ',6],
          [' ',6,' ',' ',' ',' ',2,8,' '],
          [' ',' ',' ',4,1,9,' ',' ',5],
          [' ',' ',' ',' ',8,' ',' ',7,9]]
          
          
sudokusolver(board,0,0,0)
print("brd is",brd)
